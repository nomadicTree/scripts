#!/usr/bin/python3
import argparse
import subprocess
import sys

sys.tracebacklimit = 0

default_http_local_port  = 5000
default_https_local_port = 5001
default_sock_local_port  = 6000
bassenthwaite_port       = 1022

# Access an ssh tunnel to remote host
def access_tunnel(args):
    if not check_port(args):
        sys.exit()
    ssh_command = "/usr/bin/ssh -p {port} -l {user} tunnel -L{http}:127.0.0.1:80 -L{https}:127.0.0.1:443".format(
            port=args.port,
            user=args.remoteuser,
            http=args.http,
            https=args.https)
    print(ssh_command)
    ssh_subprocess = subprocess.Popen(ssh_command, shell=True)
    return_code = ssh_subprocess.wait()
    sys.exit(return_code)

def access_sock_tunnel(args):
    if not check_port(args):
        sys.exit()
    ssh_command = "/usr/bin/ssh -p {port} -l {user} tunnel -D {sock_port}".format(
            port=args.port,
            user=args.remoteuser,
            sock_port=args.sock)
    print(ssh_command)
    ssh_subprocess = subprocess.Popen(ssh_command, shell=True)
    return_code = ssh_subprocess.wait()
    sys.exit(return_code)

# Returns lis of strings containing details of currently open tunnels
def find_tunnels():
    host = "bassenthwaite"
    port = "-p %s" % bassenthwaite_port
    shell_command = "/usr/bin/whot"

    ssh_subprocess = subprocess.Popen(["/usr/bin/ssh", host, port, shell_command],
                           shell=False,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)
    tunnels = ssh_subprocess.stdout.readlines()
    if tunnels == []:
        errors = ssh_subprocess.stderr.readlines()
        for error in errors:
            error = error.decode("utf-8").rstrip()
            print("ERROR: %s" % error, file=sys.stderr)
        sys.exit()
    else:
        return [tunnel.decode("utf-8").rstrip().split(' ', 1)[1] for tunnel in tunnels]

# Prints list of currently open tunnels
def list_tunnels(args):
    tunnels = find_tunnels()
    for tunnel in tunnels[1:]: #skip first line as it is never a tunnel
        print(tunnel)

# Helper for port_checker
# Checks to see if a port is open on given port
# Returns string of tunnel info if tunnel is open, empty string if not
def is_tunnel_open(port):
    port = "%s " % str(port)
    tunnels = find_tunnels()

    for tunnel in tunnels:
        if port in tunnel:
            return tunnel;

# check if there is an organization name listed for the tunnel by parsing tunnel entry
# expected tunnel format:
#    Tunnel: <port> from <ip> (<organization>) (pid: <port>)
def is_tunnel_linked_to_organization(tunnel):
    result = False
    first_opening_paren_index = tunnel.find("(")
    last_opening_paren_index = tunnel.rfind("(")
    organization = tunnel[first_opening_paren_index+1:last_opening_paren_index-3] # offset at both ends is to omit parentheses and whitespace, this formatting is fixed
    if (organization):
        result = True
    return result

# Tells user if a tunnel is open on args.port
# Warns if organization name is missing from bassenthwaite:/etc/tunnels.txt
def check_port(args):
    result = False
    tunnel = is_tunnel_open(args.port)
    if tunnel:
        print(tunnel)
        if (not is_tunnel_linked_to_organization(tunnel)):
            print("Organization name missing from bassenthwaite:/etc/tunnels.txt");
            if(query_yes_no("Would you like to add this host to bassenthwaite:/etc/tunnels.txt?")):
                add_organization_entry(tunnel)
        result = True
    else:
        print("No tunnel open on port %d.\nTo see available tunnels, use \'tnl\'." % args.port)
    return result

# prompt for organization name and validate input
def add_organization_entry(tunnel):
    ip_start_index = tunnel.find("m") + 1 # ip address is always after first instance of "m", last character of "from"
    ip_end_index = tunnel.find("(") # ip address ends just before first instance of "("
    ip_address = tunnel[ip_start_index:ip_end_index].strip()
    organization_confirmed = False
    while not organization_confirmed:
        organization = input("Enter organization name for {ip_address}:\n".format(ip_address=ip_address))
            # tidy up input
        organization = organization.strip() # remove whitespace
        organization = organization.replace("\t", " ") # replace inner tabs with spaces
        if not organization:
            print("Organization name cannot be empty")
            continue
        organization_confirmed = query_yes_no("Confirm organization name \'{organization}\':".format(organization=organization))
    append_etc_tunnels(ip_address, organization)

# ssh to bassenthwaite and add an entry for the ip and organization
def append_etc_tunnels(ip_address, organization):
    host = "bassenthwaite"
    port = "-p %s" % bassenthwaite_port
    tunnel_entry = "{ip_address}\t{organization}".format(ip_address = ip_address, organization=organization)
    shell_command = "echo \'{tunnel_entry}\' >> /etc/tunnels.txt".format(tunnel_entry=tunnel_entry)
    ssh_subprocess = subprocess.Popen(["/usr/bin/ssh", host, port, shell_command],
                           shell=False)
    return_code = ssh_subprocess.wait()
    print("bassenthwaite:/etc/tunnels.txt updated")
    print(tunnel_entry)

# adapted from https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input
#    "question" is a string that is presented to the user.
#    "default" is the presumed answer if the user just hits <Enter>.
#        It must be "yes" (the default), "no" or None (meaning
#        an answer is required of the user).
#
#    The "answer" return value is True for "yes" or False for "no".
def query_yes_no(question, default="yes"):
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        print(question + prompt, end = "")
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            print("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")

# cat bassenthwaite:/etc/tunnels.txt
def cat_tunnels_txt(args):
    host = "bassenthwaite"
    port = "-p %s" % bassenthwaite_port
    shell_command = "cat /etc/tunnels.txt"
    ssh_subprocess = subprocess.Popen(["/usr/bin/ssh", host, port, shell_command],
                           shell=False)
    return_code = ssh_subprocess.wait()
    sys.exit(return_code)

parser = argparse.ArgumentParser(description="list, check, and access open ssh tunnels")
parser.set_defaults(func=list_tunnels)
subparsers = parser.add_subparsers(title="commands", help="command help")

parser_cat = subparsers.add_parser("cat", aliases=["c"], help="cat bassenthwaite:/etc/tunnels.txt")
parser_cat.set_defaults(func=cat_tunnels_txt)

# Arguments for accessing a tunnel
parser_tunnel = subparsers.add_parser("access", aliases=["a"], help="access an open tunnel")
parser_tunnel.add_argument("port", type=int, help="remote port of tunnel")
parser_tunnel.add_argument("remoteuser", type=str, help="user on remote host")
parser_tunnel.add_argument("-H", "--http", type=int, default=default_http_local_port,
    help="local port to bind remote port 80 to (default %s)" % default_http_local_port)
parser_tunnel.add_argument("-S", "--https", type=int, default=default_https_local_port,
    help="local port to bind remote port 443 to (default %s)" % default_https_local_port)
parser_tunnel.set_defaults(func=access_tunnel)

parser_sock_tunnel = subparsers.add_parser("sock", aliases=["s"], help="acces an open tunnel using a socks proxy")
parser_sock_tunnel.add_argument("port", type=int, help="remote port of tunnel")
parser_sock_tunnel.add_argument("remoteuser", type=str, help="user on remote host")
parser_sock_tunnel.add_argument("-S", "--sock", type=int, default=default_sock_local_port,
    help="local port for socks proxy (default %s)" % default_sock_local_port)
parser_sock_tunnel.set_defaults(func=access_sock_tunnel)

# Arguments to check a port for open tunnels
parser_check_port = subparsers.add_parser("port", aliases=["p"], help="check to see if a port has a tunnel open on it")
parser_check_port.add_argument("port", type=int, help="port to check")
parser_check_port.set_defaults(func=check_port)

args = parser.parse_args()
args.func(args)
